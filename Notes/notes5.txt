[13:43] 

we cannot just store the name of our todo 
    we need to store an object of whether or not it's complete
        we need to have an ID as well

- src > App.js 
    we need to change the parameters of the useState 
        '  const [todos, setTodos] = useState([{ id: 1, name: 'Todo 1', complete: false }]) '

- src > TodoList.js 
    add a .id to our todo 

        todos.map(todo => {
            return <Todo key={todo.id} todo={todo} />
        })

- src > Todo.js 
    add name to the todo 

        return (
            <div>
                {todo.name}
            </div>
        )

[14:30] Check box next to list of dos 

now that the todos are showing 
    lets put a checkbox next to it 
        to check whether it is complete or not 

- src > Todo.js 
    need to put a <label> tag within our div 
        and an <input> inside of that,
            and give it and attribute of type="checkbox"
                and another attribute called checked={todo.complete}

                return (
                    <div>
                        <label>
                            <input type="checkbox" checked={todo.complete} />
                            {todo.name}
                        </label>
                    </div>
                )

As a test 
- src > App.js 
    in our useState variable 
        change the 'complete' key value to 'true'
            look in the browser and the Todo1 should be checked 

    set up events so that we can add to the todo list 
        remove the default key:value arguments of the useState variable 
            and just have it as an empty array when the app starts 
                but we want to add todos when we click the 'Add Todo' button 
                